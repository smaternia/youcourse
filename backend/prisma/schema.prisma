// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  GUEST
  ADMIN
}

model User {
  id                String   @id @default(uuid())
  fullname          String
  username          String   @unique
  email             String   @unique
  password          String   @default("")
  photo             String   @default("")
  is_email_verified Boolean  @default(false)
  token             String   @unique
  role              UserRole @default(GUEST)
  provider          String   @default("email")

  courses  Course[]
  videos   Video[]
  roadmaps Roadmap[]
  members  Member[]
  comments Comment[]
}

model Course {
  id           String  @id @default(uuid())
  title        String
  thumbnail    String
  description  String  @db.Text
  is_published Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  admin_id String
  admin    User   @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  videos  Video[]
  members Member[]
  roadmap Roadmap[] @relation("CourseToRoadmap")

  @@index([admin_id])
}

model Member {
  id        String @id @default(uuid())
  user_id   String
  course_id String

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([course_id])
}

model Video {
  id           String @id @default(uuid())
  title        String
  video_url    String
  description  String @db.Text
  youtube_info Json   @default("{}")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  course_id String
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  admin_id String
  admin    User   @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  comments Comment[]

  @@index([course_id])
  @@index([admin_id])
}

model Roadmap {
  id    String @id @default(uuid())
  title String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  admin_id String
  admin    User   @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  courses Course[] @relation("CourseToRoadmap")

  @@index([admin_id])
}

model Comment {
  id         String   @id @default(uuid())
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  video_id String
  video    Video  @relation(fields: [video_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([video_id])
}
